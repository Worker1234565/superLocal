/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import static com.sun.javafx.css.SizeUnits.PC;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.PopupMenu;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JPanel;
import javax.swing.SwingWorker;

/**
 *
 * @author Student
 */
public class MainPanel extends javax.swing.JPanel {

    /**
     * Creates new form MainPanel
     */
    private pc pc;
    private JPanel[] panels;
    DefaultListModel dlm; // модель списка
    StatusBar statusBar;

    /**
     * Creates new form MainPanel
     */
    public MainPanel(StatusBar statusBar) {
        initComponents();
        dlm = new DefaultListModel();

        dlm.clear();
        jList1.setModel(dlm);
        dlm.add(0, "Comp6");
        dlm.add(1, "Comp5");
        dlm.add(2, "Comp4");
        dlm.add(3, "Comp3");
        dlm.add(4, "Comp2");
        dlm.add(5, "Comp1");
        this.statusBar = statusBar;
    }





    private void checkHost(String baseIp, int start, int end) {
        dlm.clear();
        int timeout = 100;
        int j = 0;
        for (int i = start; i <= end; i++) {
            try {
                String host = baseIp + "." + i;
                if (InetAddress.getByName(host).isReachable(timeout)) {
                    dlm.add(j, host);
                    j++;
                }
            } catch (Exception ex) {

            }
        }
    }

    //checkHost()
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jSpinner2 = new javax.swing.JSpinner();
        jSpinner3 = new javax.swing.JSpinner();
        jSpinner1 = new javax.swing.JSpinner();

        jButton1.setText("show");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("scan");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("диапазон");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setText("интервал");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(19, 19, 19))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1)
                            .addGap(18, 18, 18)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)))
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(4, 4, 4)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addGap(0, 89, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int countcomp = dlm.getSize();
        createComp(countcomp);
    }    
private void createComp(int quantityComps) {
        panels = new JPanel[quantityComps];
        jPanel1.removeAll();
        for (int i = 0; i < quantityComps; i++) {
            final JPanel dot = new JPanel();
            pc = new pc(dlm.getElementAt(i).toString());
            dot.add(pc);
            panels[i] = dot;
        }
        
        JPanel mainPanel=new JPanel();
        //mainPanel.setBackground(Color.yellow);
        mainPanel.setLayout(new GridLayout(3, 3, 5, 5)); // 2 последних значения -- отступы

        for (int q = 0; q < panels.length; q++) {
            mainPanel.add(panels[q]);
        }
        jPanel1.setLayout(new BorderLayout());
        jPanel1.add(mainPanel, BorderLayout.CENTER);
        jPanel1.revalidate();
        
    


        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    public static void getNetworkIPS() {
        final byte[] ip;
        try {
            ip = InetAddress.getLocalHost().getAddress();
        } catch (Exception e) {
            return;
        }

        for (int i = 1; i <= 254; i++) {
            final int j = i;

            new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        ip[3] = (byte) j;

                        String host = "192.168.4" + "." + j;

                        //InetAddress address = InetAddress.getByAddress(ip);
                        //String output = address.toString().substring(1);
                        if (InetAddress.getByName(host).isReachable(200)) {
                            System.out.println(host + " is on the network");
                        } else {
                            System.out.println("Not Reachable: " + host);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }).start();
        }
    
    }
    
    private static class ScanResult {
    String host;
    boolean isReachable;
    
    public ScanResult(String host, boolean isReachable) {
        this.host = host;
        this.isReachable = isReachable;
    }
}
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    
        
        
        
 int start = Integer.valueOf(jSpinner2.getValue().toString());
        int end = Integer.valueOf(jSpinner3.getValue().toString());
        String subnet = jTextField1.getText().trim();

        
        int totalSections = Integer.valueOf(jSpinner2.getValue().toString());
        dlm.clear();
        statusBar.setStatusPG(0);

        final int totalHosts = end - start + 1;
        final java.util.concurrent.atomic.AtomicInteger completedHosts = new java.util.concurrent.atomic.AtomicInteger(0);

        
        SwingWorker<Void, Integer> progressWorker = new SwingWorker<Void, Integer>() {
            @Override
            protected Void doInBackground() throws Exception {
                while (completedHosts.get() < totalHosts) {
                    
                    int progress = (completedHosts.get() * totalSections / totalHosts) * (100 / totalSections);
                    publish(Math.min(progress, 100));
                    Thread.sleep(50);
                }
                publish(100);
                return null;
            }

            @Override
            protected void process(List<Integer> chunks) {
                int progress = chunks.get(chunks.size() - 1);
                statusBar.setStatusPG(progress);
            }

            @Override
            protected void done() {
                statusBar.setStatusPG(100);
            }
        };

       
        progressWorker.execute();

        
        for (int i = start; i <= end; i++) {
            final int currentIp = i;

            new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        String host = subnet + "." + currentIp;
                        int timeout = 200;

                        if (InetAddress.getByName(host).isReachable(timeout)) {
                            javax.swing.SwingUtilities.invokeLater(new Runnable() {
                                public void run() {
                                    dlm.addElement(host);
                                }
                            });
                          
                        } else {
                            
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    } finally {
                        completedHosts.incrementAndGet();
                    }
                }
            }).start();
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed

        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    
}
